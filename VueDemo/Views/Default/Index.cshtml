
@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>
<h3>Vue.js 中文文档 https://vuejs.bootcss.com/api/</h3>
<div id="todo-list-example">
    <div class="panel panel-default">
        <div class="panel-heading">文本框绑定\事件绑定\循环对象\属性绑定</div>
        <div class="panel-body">
            <input v-model="newTodoText"
                   v-on:keyup.enter="addNewTodo"
                   placeholder="Add a todo">
            <ul>
                <li is="todo-item"
                    v-for="(todo, index) in todos"
                    v-bind:title="todo"
                    v-bind:indexa="index"
                    v-on:remove="todos.splice(index, 1)"></li>
            </ul>

        </div>
        <div class="panel-footer">注意：属性绑定必须为小写（html会自动转换这些属性为小写），除非Vue中定义的属性也为小写，否则不生效</div>
    </div>

    <div class="panel panel-info">
        <div class="panel-heading">#使用 JavaScript 表达式</div>
        <div class="panel-body">
            <button v-on:click="counter += 1">增加 1</button>
            <p>这个按钮被点击了 {{ counter }} 次。</p>
        </div>
        <div class="panel-footer">注意：每个绑定都只能包含单个表达式</div>
    </div>

    <div class="panel panel-info">
        <div class="panel-heading">#验证原生事件与Vue绑定事件执行顺序</div>
        <div class="panel-body">
            <button v-on:click="warn('Form cannot be submitted yet.', $event)" onclick="javascript: alert('原生事件');">Submit</button>
        </div>
    </div>


    <div class="panel panel-info">
        <div class="panel-heading">#自定义控件\绑定事件</div>
        <div class="panel-body">
            <p>{{ total }}</p>
            <button-counter v-on:increment="incrementTotal"></button-counter>
            <button-counter v-on:increment="incrementTotal"></button-counter>
        </div>
    </div>

    <div class="panel panel-info">
        <div class="panel-heading">#修饰符</div>
        <div class="panel-body">
            <!-- Alt + C -->
            <p> 在下面的输入框中按下 enter 键删除输入框内容。Message is: {{ message }}</p>
            <input v-on: keyup.enter="clear($event)" v-model="message" placeholder="edit me">
        </div>
    </div>

    <div class="panel panel-info">
        <div class="panel-heading">#Checkbox绑定</div>
        <div class="panel-body">
            <input type="checkbox" id="checkbox" v-model="checked">
            <label for="checkbox">{{ checked }}</label>
            <br />
            <input type="checkbox" id="jack" value="Jack" v-model="checkedNames">
            <label for="jack">Jack</label>
            <input type="checkbox" id="john" value="John" v-model="checkedNames">
            <label for="john">John</label>
            <input type="checkbox" id="mike" value="Mike" v-model="checkedNames">
            <label for="mike">Mike</label>
            <br>
            <span>Checked names: {{ checkedNames }}</span>
        </div>
    </div>

    <div class="panel panel-info">
        <div class="panel-heading">#延迟绑定（输入之后文本框失去焦点绑定）</div>
        <!-- List group -->
        <ul class="list-group">
            <li class="list-group-item">
                <input v-model.lazy="age" />
                <p>{{ age }}</p>
            </li>
            <li class="list-group-item">
                <p>Change立即响应</p>
                <input v-model="parentMsg" />
                <p>{{ parentMsg }}</p>
            </li>

        </ul>
    </div>

    <div class="panel panel-info">
        <div class="panel-heading">#绑定控件的prop属性myMessage为parentMsg</div>
        <div class="panel-body">
            <my-component my-message="parentMsg"></my-component>
        </div>
    </div>

    <div class="panel panel-info">
        <div class="panel-heading">{{countproperty}}</div>
        <ul class="list-group">
            <li class="list-group-item">
                Js Reversed message:  {{ countproperty.split('').reverse().join('') }}
            </li>
            <li class="list-group-item">
                Call Computed Reversed message:   {{reversedCountProperty}}

                计算属性是基于它们的响应式依赖进行缓存的
            </li>
            <li class="list-group-item">
                Call Methods Reversed message:  {{reversedCountMethods()}}
            </li>
    </div>
    <div class="panel panel-info">
        <div class="panel-heading" style="font-weight:bold"> #计算属性 vs 侦听属性</div>
        <div class="panel-body">
            {{fullName}}
        </div>
    </div>


    <div class="panel panel-info">
        <div class="panel-heading">#复杂自定义控件绑定校验</div>
        <div class="panel-body">
            <example label="单价" v-model="price"></example>{{ price }}
        </div>
    </div>


</div>
@*<script src="https://cdn.rawgit.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e/raw/98739fb8ac6779cb2da11aaa9ab6032e52f3be00/currency-validator.js"></script>*@
<script type="text/javascript">
    var a, b;
    (function () {
        alert(a);
        alert(b);
        var a = b = 3;
        alert(a);
        alert(b);
    })();
    alert(a);
    alert(b);

    console.log(1 + "2" + "2");
    console.log(1 + +"2" + "2");
    console.log("A" - "B" + "2");
    console.log("A" - "B" + 2);

    var todoItem = {
        template: '\
    <li>\
      {{ title }} - {{indexa}} \
      <button v-on:click="$emit(\'remove\')">X</button>\
    </li>\
  ',
        props: ['title', 'indexa']
    };

    // 注册
    var myComponent = {
        props: ['myMessage'],
        template: '<div>{{ myMessage }}</div>'
    }

    var example =   {
        props: {
            label: {
                type: String,
                required: true,
            },
            value: {
                type: Number,
                default:22
            }

        },
        template: '<div>\
        <span is="label">{{ label }}</span>\
        $\
        <input ref="input"\
        v-bind:value="value" \
        v-on:input="updateValue($event.target.value)"\
        v-on:focus="selectAll"\
v-on:blur="formatValue" />\
        </div>',
        methods: {
            updateValue: function (value) {
                var result = currencyValidator.parse(value, this.value)
                if (result.warning) {
                    this.$refs.input.value = result.value
                }
                this.$emit('input', result.value)
            },
            selectAll: function (event) {
                // Workaround for Safari bug
                // http://stackoverflow.com/questions/1269722/selecting-text-on-focus-using-jquery-not-working-in-safari-and-chrome
                setTimeout(function () {
                    event.target.select()
                }, 0)
            },
            formatValue: function () {
                this.$refs.input.value = currencyValidator.format(this.value)
            }
        }
    }

    Vue.component('button-counter', {
        template: '<button v-on:click="increment">{{ counter }}</button>',
        data: function () {
            return {
                counter: 0
            }
        },
        methods: {
            increment: function () {
                console.log('this.counter += 1');
                this.counter += 1
                this.$emit('increment')
            }
        },
    })


    var vm = new Vue({
        el: '#todo-list-example',
        data: {
            newTodoText: '',
            todos: [
              'Do the dishes',
              'Take out the trash',
              'Mow the lawn'
            ],
            counter: 0,
            message: '',
            checked: true,
            checkedNames: ["Jack"],
            age: 0,
            parentMsg: '',
            price: 11,
            total: 0,
            countproperty: '#计算属性缓存 vs 方法',
            firstName: 'Foo',
            lastName: 'Bar',
            fullName: 'Foo Bar'
        },
        components: {
            'todo-item': todoItem,
            'my-component': myComponent,
            'example': example,
        },
        computed: {
            // 计算属性的 getter
            reversedCountProperty: function () {
                // `this` 指向 vm 实例
                return this.countproperty.split('').reverse().join('')
            },
            fullName: function () {
                return this.firstName + ' ' + this.lastName;
            }
        },
        methods: {
            incrementTotal: function () {
                console.log('this.total += 1');
                this.total += 1
            },
            addNewTodo: function () {
                this.todos.push(this.newTodoText)
                this.newTodoText = ''
            },
            warn: function (message, event) {
                // 现在我们可以访问原生事件对象
                if (event) event.preventDefault();
                alert(message);
            },
            clear: function (event) {
                event.target.value = ''
            },
            reversedCountMethods: function () {
                return this.countproperty.split('').reverse().join('')
            }
        },
        watch: {
            firstName: function (val) {
                this.fullName = val + ' ' + this.lastName
            },
            lastName: function (val) {
                this.fullName = this.firstName + ' ' + val
            }
        }   
    })

</script>